<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[无重复字符的最长子串]]></title>
    <url>%2F2018%2F12%2F01%2FAlgorithm%2F%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。 示例1: 输入：”abcabcbb”输出：3解释：因为无重复字符的最长子串是 “abc”，所以其长度为 3。 示例2: 输入：”bbbbb”输出：1解释：因为无重复字符的最长子串是 “b”，所以其长度为 1。 示例3: 输入：”pwwkew”输出：3解释：因为无重复字符的最长子串是 “wke”，所以其长度为 3。请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。 Java实现12345678910111213141516171819class Solution &#123; public int lengthOfLongestSubstring(String s) &#123; StringBuffer sub = new StringBuffer(); int size = sub.length(); for (int i = 0; i &lt; s.length(); i++) &#123; for (int j = 0; j &lt; sub.length(); j++) &#123; if (s.charAt(i) == sub.charAt(j)) &#123; sub = sub.delete(0, j + 1); break; &#125; &#125; sub.append(s.charAt(i)); if (sub.length() &gt; size) &#123; size = sub.length(); &#125; &#125; return size; &#125;&#125;]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[两数相加]]></title>
    <url>%2F2018%2F12%2F01%2FAlgorithm%2F%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0%2F</url>
    <content type="text"><![CDATA[给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。您可以假设除了数字 0 之外，这两个数都不会以 0 开头。 示例: 输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)输出：7 -&gt; 0 -&gt; 8原因：342 + 465 = 807 Java实现1234567891011121314151617181920212223242526272829303132333435363738394041424344/** * Definition for singly-linked list. * public class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; val = x; &#125; * &#125; */class Solution &#123; public ListNode addTwoNumbers(ListNode l1, ListNode l2) &#123; int pre = 0; ListNode l = null; ListNode next = null; while (l1 != null || l2 != null || pre != 0) &#123; int v1 = 0; int v2 = 0; if (l1 != null) &#123; v1 = l1.val; l1 = l1.next; &#125; if (l2 != null) &#123; v2 = l2.val; l2 = l2.next; &#125; int v = v1 + v2 + pre; if (v &gt;= 10) &#123; v = v - 10; pre = 1; &#125; else &#123; pre = 0; &#125; if (l == null) &#123; l = new ListNode(v); &#125; else if (next == null) &#123; next = new ListNode(v); l.next = next; &#125; else &#123; next.next = new ListNode(v); next = next.next; &#125; &#125; return l; &#125;&#125;]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[两数之和]]></title>
    <url>%2F2018%2F12%2F01%2FAlgorithm%2F%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C%2F</url>
    <content type="text"><![CDATA[给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的 两个 整数。你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。 示例: 给定 nums = [2, 7, 11, 15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1] Java实现123456789101112class Solution &#123; public int[] twoSum(int[] nums, int target) &#123; for (int i = 0; i &lt; nums.length; i++) &#123; for(int j = i + 1; j &lt; nums.length; j++) &#123; if (nums[i] + nums[j] == target) &#123; return new int[]&#123;i, j&#125;; &#125; &#125; &#125; return null; &#125;&#125;]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[寻找两个有序数组的中位数]]></title>
    <url>%2F2018%2F12%2F01%2FAlgorithm%2F%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0%2F</url>
    <content type="text"><![CDATA[给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。你可以假设 nums1 和 nums2 不会同时为空。 示例1: nums1 = [1, 3]nums2 = [2]则中位数是 2.0 示例2: nums1 = [1, 2]nums2 = [3, 4]则中位数是 (2 + 3)/2 = 2.5 Java实现123456789101112131415161718192021222324252627282930313233343536373839404142class Solution &#123; public double findMedianSortedArrays(int[] nums1, int[] nums2) &#123; int len1 = nums1.length; int len2 = nums2.length; int[] nums = new int[len1 + len2]; int k = 0; for (int i = 0, j = 0; i &lt; len1 || j &lt; len2;) &#123; if (i &lt; len1 &amp;&amp; j &gt;= len2) &#123; nums[k] = nums1[i]; i++; k++; continue; &#125; else if (i &gt;= len1 &amp;&amp; j &lt; len2) &#123; nums[k] = nums2[j]; j++; k++; continue; &#125; int num1 = nums1[i]; int num2 = nums2[j]; if (num1 == num2) &#123; nums[k] = num1; nums[k + 1] = num1; j++; i++; k++; &#125; else if (num1 &gt; num2) &#123; nums[k] = num2; j++; &#125; else &#123; nums[k] = num1; i++; &#125; k++; &#125; if (k % 2 == 0) &#123; return (float)(nums[k / 2 - 1] + nums[k / 2]) / 2; &#125; else &#123; return nums[(k - 1) / 2]; &#125; &#125;&#125;]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Activiti优化]]></title>
    <url>%2F2018%2F12%2F01%2FJava%2FActiviti%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[事件处理]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>activiti</tag>
        <tag>workflow</tag>
        <tag>工作流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F11%2F30%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post 1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
